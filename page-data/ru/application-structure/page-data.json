{"componentChunkName":"component---src-templates-blog-template-js","path":"/ru/application-structure","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://featureslices.dev/v0.1\"><img src=\"https://img.shields.io/badge/feature/slices-0.1-orange\"></a></p>\n<p>Исходный код приложения я разделяю на <code>features/</code>, <code>ui/</code> и <code>pages/</code>.<br/>\n<strong>Логика</strong> может лежать только в <code>pages/</code> и в <code>features/</code>.</p>\n<!-- cut -->\n<p>Пример:</p>\n<blockquote>\n<p>▸ — значок свёрнутой директории в дереве</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/\n  api/▸\n  features/▸\n  lib/▸\n  pages/▸\n  ui/▸</code></pre></div>\n<h2>1. Структура <a href=\"https://t.me/feature_slices\">feature</a>:</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/\n  features/\n    account/▸\n    editor/▸\n    settings/▸\n    users/\n      atoms/\n        index.js\n        avatar.js\n      lib/\n        lib-name/\n          index.js\n          test.js\n          readme.md\n      models/▸\n      molecules/▸\n      organisms/▸\n      templates/▸\n      index.js</code></pre></div>\n<p><a href=\"https://t.me/feature_slices\">Фича</a> — полезная функциональность для пользователя, или набор сущностей объединенных одной идеей. Например: пользователи, текстовый-редактор, аккаунт, статьи.</p>\n<p><a href=\"https://t.me/feature_slices\">Фича</a> не может быть группировкой по типу, слишком абстрактной сущностью. Примеры <strong>как не надо</strong>: роли, формы, валидации.</p>\n<ol>\n<li>Каждая фича имеет одинаковую структуру.</li>\n<li><code>users</code>, <code>account</code>, ... — произвольное название фичи в param-case</li>\n<li>Содержимое фичи можно получать только через <code>index.js</code></li>\n<li>Каждый раздел создается, только если в нем есть содержимое.</li>\n<li><code>lib/</code> это <a href=\"/ru/why-utils-and-helpers-is-a-dump\">внутренняя библиотека</a> фичи. Должна иметь тесты и документацию.</li>\n<li><code>index.js</code> ре-экспортит необходимые элементы наружу.</li>\n<li><code>models/</code> — <a href=\"/ru/effector-model-structure\">модели effector</a></li>\n</ol>\n<h3>1.1 <a href=\"http://atomicdesign.bradfrost.com\">Atomic</a> in <a href=\"https://t.me/feature_slices\">Feature</a></h3>\n<p><code>atoms</code>, <code>molecules</code>, <code>organisms</code>, <code>templates</code> — <a href=\"http://atomicdesign.bradfrost.com\">atomic design</a>, компоненты <a href=\"https://t.me/feature_slices\">фичи</a>.</p>\n<p>Если предполагается много файлов на каждый компонент (<code>.test</code>, <code>.story</code>, <code>.md</code>, ...):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">feature/\n  users/\n    atoms/▸\n    molecules/\n      personal-apply/▸\n      user-card/\n        index.js\n        story.js\n        test.js\n        readme.md\n    organisms/▸\n    templates/▸</code></pre></div>\n<p>Если файлов мало, можно не создавать директорию. Главное, чтобы в пределах фичи выглядело одинаково.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">feature/\n  settings/\n    atoms/▸\n    molecules/▸\n    organisms/\n      monitoring-editor.js\n      monitoring-editor.test.js\n      marketplace.js\n      marketplace.test.js</code></pre></div>\n<h2>2. Структура pages:</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/\n  pages/\n    post/\n      model.js\n      page.js\n    posts/\n      create/▸\n      edit/▸\n    auth/\n      login/▸\n      register/\n        model.js\n        page.js</code></pre></div>\n<ol>\n<li>Вложенность страниц должна отображать роутинг реального урла</li>\n<li>Исходник компонента лежит в <code>page.js</code></li>\n<li>Уникальная логика страницы лежит в <code>model.js</code></li>\n<li>Любая обобщенная логика выносится в <a href=\"/ru/why-utils-and-helpers-is-a-dump\">библиотечный код</a> <code>src/lib/lib-name/</code></li>\n</ol>\n<p>Примеры:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/\n  pages/\n    post/\n      page.js\n      model.js\n    repo/\n      view/\n        pulls/▸\n        issues/\n          view/\n            page.js\n            model.js\n        page.js\n        model.js\n    index.js</code></pre></div>\n<ul>\n<li>\n<p>Страница поста в блоге</p>\n<ul>\n<li>file: <code>src/pages/post/page.js</code></li>\n<li>route: <code>/post/:postSlug</code> (или <code>/:postSlug</code>)</li>\n<li>example: <code>/post/effector-model</code></li>\n</ul>\n</li>\n<li>\n<p>Просмотр issue репозитория</p>\n<ul>\n<li>file: <code>src/pages/repo/view/issues/view/page.js</code></li>\n<li>route: <code>/repo/:repoSlug/issues/:issueId</code></li>\n<li>example: <code>/repo/effector/issues/5</code></li>\n</ul>\n</li>\n</ul>\n<h2>3. Структура UI:</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/\n  ui/\n    atoms/\n      index.js\n      component-name/\n        index.js\n        readme.js\n        story.js\n        test.js\n    molecules/▸\n    organisms/▸\n    templates/▸\n    index.js</code></pre></div>\n<ol>\n<li><a href=\"http://atomicdesign.bradfrost.com\">Atomic Design</a></li>\n<li>Весь UI это базовые блоки из которых можно собрать любую фичу.</li>\n<li>UI должен быть оторван от фич и любых глобальных сторов</li>\n<li>Компоненты должны быть максимально переиспользуемыми, независимыми от контекста <em>(не React Context API)</em></li>\n</ol>","frontmatter":{"date":"August 20, 2019","description":"Где искать файлики в проекте и куда класть новые","title":"Структура приложения"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D0%B0-feature\">1. Структура feature:</a></p>\n<ul>\n<li><a href=\"#11-atomic-in-feature\">1.1 Atomic in Feature</a></li>\n</ul>\n</li>\n<li><a href=\"#2-%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D0%B0-pages\">2. Структура pages:</a></li>\n<li><a href=\"#3-%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D0%B0-ui\">3. Структура UI:</a></li>\n</ul>","excerpt":"Исходный код приложения я разделяю на features/, ui/ и pages/.\nЛогика может лежать только в pages/ и в features/."}},"pageContext":{"slug":"application-structure","lang":"ru"}}}